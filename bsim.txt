generate_fruit:
JMP(R25) 
JMP(R25) 
JMP(R26) 
JMP(R26)
ADDC(R31, 11, R28)  
ADDC(R31, 10, R29)	
SHR(R25, R28, R25) 
SHR(R26, R29, R26) 

initialize_snake:
ADDC(R31, 16, R0) 
ADDC(R31, 32, R1) 
ADDC(R31, 0, R23) 
ADDC(R31, 1, R24) 
ADDC(R31, 1, R22) 

clear_matrix:
CMPLEC(R28, 0b1111111111, R29) 
BF(R29, done_clearing, R31)
ST(R31, 0, R28)
ADDC(R28, 1, R28)
BEQ(R31, clear_matrix, R31)

done_clearing:
ADD(R31, R31, R28) 
ADD(R31, R31, R29)

update_length_and_check_win:
ADD(R22, R30, R22) 
MOVE(R31, R30)
CMPEQC(R22, 6, R28)  
BT(R28, win, R31)

update_head:
ADD(R0, R31, R28) 
ADD(R1, R31, R29) 
ADD(R0, R23, R0)  
ADD(R1, R24, R1)  

update_body:
CMPEQC(R22, 1, R27)		
BT(R27, update_done, R31)       
MOVE(R2, R20)
MOVE(R3, R21) 
MOVE(R28, R2)
MOVE(R29, R3)
MOVE(R20, R28)
MOVE(R21, R29) 

CMPEQC(R22, 2, R27)
BT(R27, update_done, R31)       
MOVE(R4, R20)
MOVE(R5, R21) 
MOVE(R28, R4)
MOVE(R29, R5)
MOVE(R20, R28)
MOVE(R21, R29) 

CMPEQC(R22, 3, R27)
BT(R27, update_done, R31)
MOVE(R6, R20)
MOVE(R7, R21) 
MOVE(R28, R6)
MOVE(R29, R7)
MOVE(R20, R28)
MOVE(R21, R29) 

CMPEQC(R22, 4, R27)
BT(R27, update_done, R31)
MOVE(R8, R20)
MOVE(R9, R21) 
MOVE(R28, R8)
MOVE(R29, R9)
MOVE(R20, R28)
MOVE(R21, R29) 


update_done:
check_collisions_self:
CMPEQC(R22, 1, R28)
BT(R28, check_collisions_self_done, R31)  
CMPEQ(R0, R2, R28)  
CMPEQ(R1, R3, R29)  
AND(R28, R29, R28)  
BT(R28, game_over, R31) 

CMPEQC(R22, 2, R28)
BT(R28, check_collisions_self_done, R31)
CMPEQ(R0, R4, R28)
CMPEQ(R1, R5, R29)
AND(R28, R29, R28)
BT(R28, game_over, R31)

CMPEQC(R22, 3, R28)
BT(R28, check_collisions_self_done, R31)
CMPEQ(R0, R6, R28)
CMPEQ(R1, R7, R29)
AND(R28, R29, R28)
BT(R28, game_over, R31)

CMPEQC(R22, 4, R28)
BT(R28, check_collisions_self_done, R31)
CMPEQ(R0, R8, R28)
CMPEQ(R1, R9, R29)
AND(R28, R29, R28)
BT(R28, game_over, R31)

check_collisions_self_done:
check_collisions_wall:
CMPLTC(R0, 0, R20)  
CMPLTC(R1, 0, R21)  
CMPLTC(R0, 32, R28)
CMPLTC(R1, 64, R29)
CMPEQC(R28, 0, R28) 
CMPEQC(R28, 0, R28) 
OR(R20, R21, R20)
OR(R28, R29, R28)
OR(R20, R28, R20) 
BT(R20, game_over, R31)  

check_fruit:	
CMPEQ(R0, R25, R28)  
CMPEQ(R1, R26, R29)  
AND(R28, R29, R28)   
MOVE(R28, R30)       
BF(R30, sleep, R31) 
JMP(R23) 
JMP(R24) 
ADDC(R31, 11, R28)  
ADDC(R31, 10, R29)	
SHR(R25, R28, R25) 
SHR(R26, R29, R26) 

print_fruit:
ADDC(R31, 6, R28)  
SHL(R25, R28, R28) 
OR(R28, R24, R28)  
ANDC(R25, 0b0000000000010000, R29)  
ADDC(R31, 0b111000, R27) 
ST(R27, 0, R28)
ADDC(R31, 0b000111, R27) 
BF(R29, print_snake, R31)
ST(R27, 0, R28)

print_snake:
CMPLTC(R22, 1, R28)
BT(R28, sleep, R31) 
ADDC(R31, 6, R28)
SHL(R0, R28, R28) 
OR(R28, R1, R28)  
ANDC(R0, 0b0000000000010000, R29)  
ADDC(R31, 0b111000, R27) 
ST(R27, 0, R28)
ADDC(R31, 0b000111, R27) 
BF(R29, print_snakeA, R31)
ST(R27, 0, R28)

print_snakeA:
CMPLTC(R22, 2, R28)
BT(R28, sleep, R31) 
ADDC(R31, 6, R28)
SHL(R2, R28, R28) 
OR(R28, R3, R28)  
ANDC(R2, 0b0000000000010000, R29)  
ADDC(R31, 0b111000, R27) 
ST(R27, 0, R28)
ADDC(R31, 0b000111, R27) 
BF(R29, print_snakeB, R31)
ST(R27, 0, R28)

print_snakeB:
CMPLTC(R22, 3, R28)
BT(R28, sleep, R31) 
ADDC(R31, 6, R28)
SHL(R4, R28, R28) 
OR(R28, R5, R28)  
ANDC(R4, 0b0000000000010000, R29)  
ADDC(R31, 0b111000, R27) 
ST(R27, 0, R28)
ADDC(R31, 0b000111, R27) 
BF(R29, print_snakeC, R31)
ST(R27, 0, R28)

print_snakeC:
CMPLTC(R22, 4, R28)
BT(R28, sleep, R31) 
ADDC(R31, 6, R28)
SHL(R6, R28, R28) 
OR(R28, R7, R28)  
ANDC(R6, 0b0000000000010000, R29)  
ADDC(R31, 0b111000, R27) 
ST(R27, 0, R28)
ADDC(R31, 0b000111, R27) 
BF(R29, print_snakeD, R31)
ST(R27, 0, R28)

print_snakeD:
CMPLTC(R22, 5, R28)
BT(R28, sleep, R31) 
ADDC(R31, 6, R28)
SHL(R8, R28, R28) 
OR(R28, R9, R28)  
ANDC(R8, 0b0000000000010000, R29)  
ADDC(R31, 0b111000, R27) 
ST(R27, 0, R28)
ADDC(R31, 0b000111, R27) 
BF(R29, sleep, R31)
ST(R27, 0, R28)


sleep:  
MOVE(R31, R28) 
check_condition:
CMPLTC(R28,0, R27) 
BT(R27, new_game_cycle, R31)
ADDC(R28, 1, R28)
BNE(R31, check_condition, R31)

new_game_cycle:
BNE(R31, clear_matrix, R31)
game_over:
HALT()

win:
