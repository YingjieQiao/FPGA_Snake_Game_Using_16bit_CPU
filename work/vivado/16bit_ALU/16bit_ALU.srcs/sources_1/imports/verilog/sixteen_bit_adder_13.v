/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sixteen_bit_adder_13 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  reg [15:0] s;
  
  wire [1-1:0] M_adder_cout;
  wire [16-1:0] M_adder_s;
  reg [16-1:0] M_adder_x;
  reg [16-1:0] M_adder_y;
  reg [1-1:0] M_adder_alufn;
  sixteen_bit_adder_ripple_carry_17 adder (
    .x(M_adder_x),
    .y(M_adder_y),
    .alufn(M_adder_alufn),
    .cout(M_adder_cout),
    .s(M_adder_s)
  );
  
  always @* begin
    M_adder_x = a;
    M_adder_y = b;
    M_adder_alufn = alufn[0+0-:1];
    
    case (alufn[0+1-:2])
      2'h0: begin
        s = M_adder_s;
      end
      2'h1: begin
        s = M_adder_s;
      end
      2'h2: begin
        s = a * b;
      end
      2'h3: begin
        s = a - (a / b * b);
      end
      default: begin
        s = a + b;
      end
    endcase
    out = s;
    n = s[15+0-:1];
    z = (~|s);
    v = (a[15+0-:1] & (b[15+0-:1] ^ alufn[0+0-:1]) & (~s[15+0-:1])) | ((~a[15+0-:1]) & (~(b[15+0-:1] ^ alufn[0+0-:1])) & s[15+0-:1]);
  end
endmodule
