/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifter_12 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out
  );
  
  
  
  wire [16-1:0] M_shiftLeft_out;
  reg [16-1:0] M_shiftLeft_a;
  reg [16-1:0] M_shiftLeft_b;
  shift_left_14 shiftLeft (
    .a(M_shiftLeft_a),
    .b(M_shiftLeft_b),
    .out(M_shiftLeft_out)
  );
  
  wire [16-1:0] M_shiftRight_out;
  reg [16-1:0] M_shiftRight_a;
  reg [16-1:0] M_shiftRight_b;
  shift_right_15 shiftRight (
    .a(M_shiftRight_a),
    .b(M_shiftRight_b),
    .out(M_shiftRight_out)
  );
  
  wire [16-1:0] M_shiftRightArithmetic_out;
  reg [16-1:0] M_shiftRightArithmetic_a;
  reg [16-1:0] M_shiftRightArithmetic_b;
  shift_right_arithmetic_16 shiftRightArithmetic (
    .a(M_shiftRightArithmetic_a),
    .b(M_shiftRightArithmetic_b),
    .out(M_shiftRightArithmetic_out)
  );
  
  always @* begin
    M_shiftLeft_a = a;
    M_shiftLeft_b = b;
    M_shiftRight_a = a;
    M_shiftRight_b = b;
    M_shiftRightArithmetic_a = a;
    M_shiftRightArithmetic_b = b;
    
    case (alufn[0+2-:3])
      3'h0: begin
        out = M_shiftLeft_out;
      end
      3'h1: begin
        out = M_shiftRight_out;
      end
      3'h3: begin
        out = M_shiftRightArithmetic_out;
      end
      3'h4: begin
        M_shiftRight_b = 5'h10 - b[0+3-:4];
        out = M_shiftLeft_out | M_shiftRight_out;
      end
      3'h5: begin
        M_shiftLeft_b = 5'h10 - b[0+3-:4];
        out = M_shiftLeft_out | M_shiftRight_out;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
  end
endmodule
